// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: GetDqnDataApi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义客户端要发送的数据格式
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       []*RequestNodeMatric `protobuf:"bytes,1,rep,name=state,proto3" json:"state,omitempty"`
	Reward      float64              `protobuf:"fixed64,2,opt,name=reward,proto3" json:"reward,omitempty"`
	Action      int32                `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
	NextState   []*RequestNodeMatric `protobuf:"bytes,4,rep,name=nextState,proto3" json:"nextState,omitempty"`
	Labels      []string             `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	FilterNodes []string             `protobuf:"bytes,6,rep,name=filterNodes,proto3" json:"filterNodes,omitempty"`
	NodeMap     map[string]int32     `protobuf:"bytes,7,rep,name=nodeMap,proto3" json:"nodeMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetDqnDataApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_GetDqnDataApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_GetDqnDataApi_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetState() []*RequestNodeMatric {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Request) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *Request) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *Request) GetNextState() []*RequestNodeMatric {
	if x != nil {
		return x.NextState
	}
	return nil
}

func (x *Request) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Request) GetFilterNodes() []string {
	if x != nil {
		return x.FilterNodes
	}
	return nil
}

func (x *Request) GetNodeMap() map[string]int32 {
	if x != nil {
		return x.NodeMap
	}
	return nil
}

// 定义服务端返回的数据格式
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QValues []int32 `protobuf:"varint,1,rep,packed,name=qValues,proto3" json:"qValues,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetDqnDataApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_GetDqnDataApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_GetDqnDataApi_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetQValues() []int32 {
	if x != nil {
		return x.QValues
	}
	return nil
}

type RequestNodeMatric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric []float64 `protobuf:"fixed64,1,rep,packed,name=metric,proto3" json:"metric,omitempty"`
}

func (x *RequestNodeMatric) Reset() {
	*x = RequestNodeMatric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetDqnDataApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNodeMatric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNodeMatric) ProtoMessage() {}

func (x *RequestNodeMatric) ProtoReflect() protoreflect.Message {
	mi := &file_GetDqnDataApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNodeMatric.ProtoReflect.Descriptor instead.
func (*RequestNodeMatric) Descriptor() ([]byte, []int) {
	return file_GetDqnDataApi_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RequestNodeMatric) GetMetric() []float64 {
	if x != nil {
		return x.Metric
	}
	return nil
}

var File_GetDqnDataApi_proto protoreflect.FileDescriptor

var file_GetDqnDataApi_proto_rawDesc = []byte{
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x71, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x24, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x1a, 0x3a, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x71, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x32, 0x2d, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x44, 0x51, 0x4e, 0x12, 0x23, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x51, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GetDqnDataApi_proto_rawDescOnce sync.Once
	file_GetDqnDataApi_proto_rawDescData = file_GetDqnDataApi_proto_rawDesc
)

func file_GetDqnDataApi_proto_rawDescGZIP() []byte {
	file_GetDqnDataApi_proto_rawDescOnce.Do(func() {
		file_GetDqnDataApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_GetDqnDataApi_proto_rawDescData)
	})
	return file_GetDqnDataApi_proto_rawDescData
}

var file_GetDqnDataApi_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_GetDqnDataApi_proto_goTypes = []interface{}{
	(*Request)(nil),           // 0: Request
	(*Response)(nil),          // 1: Response
	(*RequestNodeMatric)(nil), // 2: Request.nodeMatric
	nil,                       // 3: Request.NodeMapEntry
}
var file_GetDqnDataApi_proto_depIdxs = []int32{
	2, // 0: Request.state:type_name -> Request.nodeMatric
	2, // 1: Request.nextState:type_name -> Request.nodeMatric
	3, // 2: Request.nodeMap:type_name -> Request.NodeMapEntry
	0, // 3: UseDQN.GetQValues:input_type -> Request
	1, // 4: UseDQN.GetQValues:output_type -> Response
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_GetDqnDataApi_proto_init() }
func file_GetDqnDataApi_proto_init() {
	if File_GetDqnDataApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GetDqnDataApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetDqnDataApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetDqnDataApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNodeMatric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GetDqnDataApi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_GetDqnDataApi_proto_goTypes,
		DependencyIndexes: file_GetDqnDataApi_proto_depIdxs,
		MessageInfos:      file_GetDqnDataApi_proto_msgTypes,
	}.Build()
	File_GetDqnDataApi_proto = out.File
	file_GetDqnDataApi_proto_rawDesc = nil
	file_GetDqnDataApi_proto_goTypes = nil
	file_GetDqnDataApi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UseDQNClient is the client API for UseDQN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UseDQNClient interface {
	GetQValues(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type useDQNClient struct {
	cc grpc.ClientConnInterface
}

func NewUseDQNClient(cc grpc.ClientConnInterface) UseDQNClient {
	return &useDQNClient{cc}
}

func (c *useDQNClient) GetQValues(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/UseDQN/GetQValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UseDQNServer is the server API for UseDQN service.
type UseDQNServer interface {
	GetQValues(context.Context, *Request) (*Response, error)
}

// UnimplementedUseDQNServer can be embedded to have forward compatible implementations.
type UnimplementedUseDQNServer struct {
}

func (*UnimplementedUseDQNServer) GetQValues(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQValues not implemented")
}

func RegisterUseDQNServer(s *grpc.Server, srv UseDQNServer) {
	s.RegisterService(&_UseDQN_serviceDesc, srv)
}

func _UseDQN_GetQValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseDQNServer).GetQValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseDQN/GetQValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseDQNServer).GetQValues(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _UseDQN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UseDQN",
	HandlerType: (*UseDQNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQValues",
			Handler:    _UseDQN_GetQValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GetDqnDataApi.proto",
}
